using Microsoft.ML.OnnxRuntime;

using System;

using System.Collections.Generic;

using System.ComponentModel;

using System.Data;

using System.Drawing;

using System.Linq;

using System.Numerics.Tensors;

using System.Text;

using System.Threading.Tasks;

using System.Windows.Forms;

using System.Media;
using System.Threading;
using Timer = System.Threading.Timer;
using System.Drawing.Drawing2D;


namespace ClassifyBear

{

    public partial class saber : Form

    {

        public saber()

        {

            InitializeComponent();
            this.timer1.Stop();

        }



        // 使用Netron查看模型，得到模型的输入应为224*224大小的图片

        private const int imageSize = 224;
        
       


        private void button1_Click(object sender, EventArgs e)

        {

            // 识别之前先重置界面显示的内容

            label1.Text = string.Empty;

            pictureBox1.Image = null;

            pictureBox1.Refresh();



            bool isSuccess = false;

            try

            {

                pictureBox1.Load(textBox1.Text);

                isSuccess = true;

            }

            catch (Exception ex)

            {

                MessageBox.Show($"读取图片时出现错误：{ex.Message}");

                throw;

            }



            if (isSuccess)

            {

                // 图片加载成功后，从图片控件中取出224*224的位图对象

                Bitmap bitmap = new Bitmap(pictureBox1.Image, imageSize, imageSize);



                float[] imageArray = new float[imageSize * imageSize * 3];



                // 按照先行后列的方式依次取出图片的每个像素值

                for (int y = 0; y < imageSize; y++)

                {

                    for (int x = 0; x < imageSize; x++)

                    {

                        var color = bitmap.GetPixel(x, y);



                        // 使用Netron查看模型的输入发现

                        // 需要依次放置224 *224的蓝色分量、224*224的绿色分量、224*224的红色分量

                        imageArray[y * imageSize + x] = color.B;

                        imageArray[y * imageSize + x + 1 * imageSize * imageSize] = color.G;

                        imageArray[y * imageSize + x + 2 * imageSize * imageSize] = color.R;

                    }

                }



                string modelPath = AppDomain.CurrentDomain.BaseDirectory + "BearModel.onnx";



                using (var session = new InferenceSession(modelPath))

                {

                    var container = new List<NamedOnnxValue>();



                    // 用Netron看到需要的输入类型是float32[None,3,224,224]

                    // 第一维None表示可以传入多张图片进行推理

                    // 这里只使用一张图片，所以使用的输入数据尺寸为[1, 3, 224, 224]

                    var shape = new int[] { 1, 3, imageSize, imageSize };

                    var tensor = new DenseTensor<float>(imageArray, shape);



                    // 支持多个输入，对于mnist模型，只需要一个输入，输入的名称是data

                    container.Add(NamedOnnxValue.CreateFromTensor<float>("data", tensor));



                    // 推理

                    var results = session.Run(container);



                    // 输出结果有两个，classLabel和loss，这里只关心classLabel

                    var label = results.FirstOrDefault(item => item.Name == "classLabel")? // 取出名为classLabel的输出

                        .AsTensor<string>()?

                        .FirstOrDefault(); // 支持多张图片同时推理，这里只推理了一张，取第一个结果值



                    // 显示在控件中

                    label1.Text = label;

                }

            }

        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {

        }

        private void Form1_Load(object sender, EventArgs e)
        {
            
            timer1.Interval = 200;
            
        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void button2_Click(object sender, EventArgs e)
        {
            Bitmap myBig = new Bitmap(@"C:\\Users\\hasee\\Desktop\\timg.jpg");
            this.pictureBox1.Image = myBig;
        }

        private void button3_Click(object sender, EventArgs e)
        {
            SoundPlayer player = new SoundPlayer("C:\\Users\\hasee\\source\\repos\\ClassifyBear1\\ClassifyBear1\\calon.wav");
            bool isPlaying = false;
            if (isPlaying)
                player.Stop();
            else
                player.Play();
            player.Play();
        }

        private void button4_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void button5_Click(object sender, EventArgs e)
        {
            
            Bitmap bitmap = new Bitmap(pictureBox1.Width, pictureBox1.Height);
            Graphics g = Graphics.FromImage(bitmap);
            g.Clear(Color.White);
            pictureBox1.Image = bitmap;
            label1.Text = "";
           

        }
        
        private void button2_Click_1(object sender, EventArgs e)
        {

            this.timer1.Start();
            
            
        }
        

        int i;
        private void timer1_Tick(object sender, EventArgs e)
        {
            i++;
            if (i == imageList1.Images.Count)
            {
                i = 0;
            }
            this.pictureBox1.Image = this.imageList1.Images[i];


        }
        

    }

}
