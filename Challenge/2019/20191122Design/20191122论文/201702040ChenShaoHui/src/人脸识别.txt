#include <opencv2/opencv.hpp>
#include <iostream>

using namespace std;
using namespace cv;

//String my_face_cascade_name = "my_haarcasade_face.xml";
String face_cascade_name = "haarcascade_frontalface_alt.xml";
CascadeClassifier face_cascade;
String window_name = "Capture - face detection";

void detectFace(Mat frame);

int main()
{
	VideoCapture capture;
	Mat frame;

	//检测是否成功读取人脸的haar分类器，就是那个xml文件
	if (!face_cascade.load(face_cascade_name))
	{
		cout << "Error: cannot load face casade!!!" << endl;
		return -1;
	}

	capture.open(0);//打开摄像头
	//检测摄像头是否成功打开
	if (!capture.isOpened())
	{
		cout << "Error: cannot open the camera!!!" << endl;
		return -1;
	}

	namedWindow(window_name);//创建窗口

	while (true)
	{
		capture >> frame;   //从摄像头读入一帧图像

		detectFace(frame);//对那帧图像进行处理，识别人脸

		//等待按键，若按下esc键，则退出循环
		int c = waitKey(10);
		if (c == 0x1B)
			break;
	}


	return 0;
}

//从输入图像中检测人脸
void detectFace(Mat frame)
{
	Mat frame_gray;
	vector<Rect> face;

	cvtColor(frame, frame_gray, COLOR_BGR2GRAY);//转成灰度图像
	equalizeHist(frame_gray, frame_gray);//直方图均衡化

	//按照文档说明调用函数即可
	face_cascade.detectMultiScale(frame_gray, face, 1.1, 2, CASCADE_SCALE_IMAGE, Size(30, 30));

	//遍历所有人脸
	for (size_t i = 0; i < face.size(); i++)
	{
		//根据返回的Rect的x坐标、y坐标、宽width和高height算出中心位置
		Point center(face[i].x + face[i].width / 2, face[i].y + face[i].height / 2);
		//调用ellipse画出椭圆型边框，指示人脸
		ellipse(frame, center, Size(face[i].width / 2, face[i].height / 2), 0, 0, 360, Scalar(255, 0, 255), 4, 8, 0);

	}

	//最后刷新窗口，显示图像
	imshow(window_name, frame);
}
